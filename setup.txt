#NOTE FROM BEN: IN LIEU OF DOING ALL OF THIS, YOU MIGHT BE ABLE TO JUST RUN SETUP.SH (ALTHOUGH YOU’LL HAVE TO EDIT THE SETTINGS FILE BEFOREHAND, AS DESCRIBED BELOW)

install git and clone repo
$ sudo apt-get install git
$ git clone https://github.com/langcog/web-cdi.git
$ cd web-cdi

#ASK FOR THE FOLLOWING FILES THAT ARE NOT ON GITHUB
webcdi/webcdi/email.py
webcdi/webcdi/databases.py
~/.pgpass (chmod 0600 before use)
Passwords for "webcdi-admin" and "webcdi-user" users
DB endpoint url

install dependencies
  on ubuntu:
    $ sudo apt-get python-pip python-dev postgresql-client postgresql postgresql-contrib pgadmin5 python-psycopg2 libpq-dev libxml2-dev libxslt-dev supervisor nginx
  on osx:
    install and start postgresql

#NOTE FROM BEN: YOU’LL NEED TO INSTALL HOMEBREW USING THE FOLLOWING COMMAND IF YOU DON’T ALREADY HAVE IT: /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

    $ brew install postgresql

#NOTE FROM BEN: IF YOU SHUT THE SERVER DOWN AND WANT TO RESTART, YOU HAVE TO DO SO USING THE LINE BELOW. 
    $ brew services restart postgresql

install virtualenv and set one up
$ sudo pip install virtualenv

#NOTE FROM BEN: WE MIGHT WANT TO CLARIFY THAT YOU NEED TO REPLACE “my_project_folder” BELOW WITH THE ACTUAL NAME OF YOUR PROJECT FOLDER, WHICH SHOULD BE “webcdi”
$ cd webcdi
$ virtualenv venv
$ source venv/bin/activate

install project requirements
$ pip install -r requirements.txt

set computer username
$ username={put your account username here}

create postgres database/user ($username = your OSX login)
$ sudo -u $username createdb webcdi-admin

#THIS STEP ASKS YOU TO CREATE A PASSWORD. 
$ psql -U $username webcdi-admin
webcdi-admin=> CREATE USER "webcdi-admin" WITH PASSWORD 'XXXXXX';
webcdi-admin=> CREATE USER "webcdi-user" WITH PASSWORD 'XXXXXX';


#GRANT ALL PRIVILEGES ON DATABASE TO ADMIN USER
$ psql -U $username webcdi-admin -c 'GRANT ALL PRIVILEGES ON DATABASE "webcdi-admin" TO "webcdi-admin";'


#FOR THIS TO WORK, YOU MUST GO INTO settings.py AND COMMENT OUT THE LINE STARTING WITH LOGGING = { THROUGH THE FINAL CLOSING BRACKET AFTER ‘propagate’: True,
make and run migrations
$ ./manage.py makemigrations
$ ./manage.py migrate

#FROM HERE YOU HAVE 2 OPTIONS. CREATE A BLANK VERSION OF THE DATABASE OR SYNC YOUR LOCAL COPY TO THE LIVE DATABASE. 
# TO DO THE FIRST:

	set up instruments
	$ sudo -u $username psql -d webcdi-admin -c "\\COPY cdi_forms_english_ws FROM 'cdi_form_csv/[English_WS].csv' WITH (FORMAT csv, HEADER True)"
	$ sudo -u $username psql -d webcdi-admin -c "\\COPY cdi_forms_english_wg FROM 'cdi_form_csv/[English_WG].csv' WITH (FORMAT csv, HEADER True)"
	[and so on for other instruments]

	create login for admin console
	$ ./manage.py createsuperuser

	in the admin console (http://127.0.0.1:8000/admin) add instruments for English_WS, English_WG, etc.

# TO SYNC YOUR LOCAL DATABASE TO THE LIVE DB (MAKE SURE YOU HAVE ~/.pgpass SET UP)
	$ endpointurl={put endpoint url of remote DB here}
	$ psql -U $username webcdi-admin -c 'drop schema public cascade;'
	$ psql -U $username webcdi-admin -c 'create schema public;'
	$ pg_dump -C -h $endpointurl -p 5432 -U webcdi-admin webcdi-admin | psql -U $username webcdi-admin


run locally
$ ./manage.py runserver --insecure
